"https://github.com/tpope/tpope/blob/master/.vimrc"archivos de configuracion auxiliares para windowssource $HOME/vimfiles/mswin.vim" Key mappings, functions, autocommandssource $HOME/vimfiles/keymap.vimset digraph"pathogen plugin:"https://github.com/tpope/vim-pathogen"------------------------------------------------------call pathogen#infect()call pathogen#helptags()"------------------------------------------------------"vundle "https://github.com/gmarik/vundle"------------------------------------------------------set nocompatible " be iMproved"filetype off " required!set rtp+=~/vimfiles/bundle/vundle/"let g:bundle_dir=$HOME.'/vimfiles/bundle/vundle/'" let g:bundle_dir='/cygdrive/c/Users/Proman02/vimfiles/bundle/'call vundle#rc()"" let Vundle manage Vundle"" required!Bundle 'gmarik/vundle'" My Bundles here: "" original repos on githubBundle 'scrooloose/nerdtree'Bundle 'tpope/vim-surround'Bundle 'tpope/vim-repeat'Bundle 'tpope/vim-fugitive'Bundle 'tpope/vim-abolish'Bundle 'tpope/vim-unimpaired'Bundle 'tpope/vim-commentary'Bundle 'Lokaltog/vim-easymotion'Bundle 'kien/ctrlp.vim'Bundle 'scrooloose/nerdcommenter'Bundle 'drmingdrmer/xptemplate'Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}Bundle 'mileszs/ack.vim'Bundle 'tpope/vim-endwise'Bundle 'tpope/vim-cucumber'Bundle 'tpope/vim-ragtag'Bundle 'tpope/vim-rails'Bundle 'tpope/vim-bundler'Bundle 'tpope/gem-ctags'Bundle 'mattn/gist-vim'Bundle 'othree/html5.vim'Bundle 'mattsacks/vim-complete'Bundle 'othree/javascript-libraries-syntax.vim'Bundle 'Lokaltog/vim-powerline'Bundle 'SirVer/ultisnips'Bundle 'tobyS/skeletons.vim'Bundle 'kana/vim-skeleton'Bundle 'tobyS/pdv'Bundle 'majutsushi/tagbar'Bundle 'shemerey/vim-indexer'Bundle 'esukram/autocomplpop.vim'Bundle 'sjl/gundo.vim'Bundle 'ervandew/supertab'Bundle 'Rip-Rip/clang_complete'Bundle 'mattn/webapi-vim'Bundle 'c9s/perlomni.vim'Bundle 'Townk/vim-autoclose'Bundle 'Shougo/neosnippet'Bundle 'tomtom/tcomment_vim'Bundle 'mattn/lisper-vim.git'Bundle 'chrisbra/SaveSigns.vim'Bundle 'scrooloose/syntastic'Bundle 'valloric/MatchTagAlways'Bundle 'plasticboy/vim-markdown'Bundle 'chrisbra/NrrwRgn'Bundle 'itspriddle/vim-jquery'Bundle 'mattn/zencoding-vim'Bundle 'godlygeek/csapprox'Bundle 'altercation/vim-colors-solarized'Bundle 'godlygeek/tabular'Bundle 'majutsushi/tagbar.git'Bundle 'SirVer/ultisnips'Bundle 'me-vlad/python-syntax.vim'Bundle 'vim-scripts/dbext.vim'Bundle 'vim-scripts/DrawIt'Bundle 'powerman/vim-plugin-viewdoc'Bundle 'xolox/vim-shell'Bundle 'Shougo/vimshell'Bundle 'othree/javascript-libraries-syntax.vim'Bundle 'spf13/PIV'Bundle 'MarcWeber/vim-addon-mw-utils'Bundle 'gotcha/vimpdb'Bundle 'vim-perl/vim-perl'Bundle 'Shougo/vimproc'Bundle 'xolox/vim-session'Bundle 'Lokaltog/vim-powerline.git'Bundle 'stephenmckinney/vim-solarized-powerline'Bundle 'Lokaltog/powerline-fonts.git'Bundle 'vim-scripts/QuickBuf'Bundle 'hynek/vim-python-pep8-indent'Bundle 'wavded/vim-stylus'Bundle 'heaths/vim-msbuild'Bundle 'nathanaelkane/vim-indent-guides'Bundle 'Rykka/colorv.vim'Bundle 'AndrewRadev/sideways.vim'Bundle 'AndrewRadev/switch.vim'Bundle 'leshill/vim-json'Bundle 'rking/ag.vim'Bundle 'mutewinter/tomdoc.vim'Bundle 'jc00ke/vim-tomdoc'Bundle 'mutewinter/taskpaper.vim'Bundle 'mutewinter/vim-css3-syntax'Bundle 'jwu/exvim'Bundle 'xolox/vim-lua-ftplugin'Bundle 'xolox/vim-lua-inspect'Bundle 'kablamo/VimDebug'Bundle 'sjl/badwolf'Bundle 'alfredodeza/pytest.vim'Bundle 'gagoar/StripWhiteSpaces'Bundle 'nosami/Omnisharp'Bundle 'mattsacks/vim-complete'Bundle 'fholgado/minibufexpl.vim'Bundle 'tsaleh/vim-matchit'Bundle 'icsharpcode/NRefactory'Bundle 'benizi/perl-support.vim'Bundle 'kevinw/pyflakes-vim'Bundle 'klen/python-mode'Bundle 'honza/vim-snippets'Bundle 'tomtom/tlib_vim'Bundle 'jeetsukumaran/vim-buffergator'Bundle 'motemen/git-vim'Bundle 'greyblake/vim-preview'Bundle 'shemerey/vim-project'Bundle 'vim-ruby/vim-ruby'Bundle 'ghewgill/vim-scmdiff'Bundle 'garbas/vim-snipmate'Bundle 'mattsacks/vim-symbols'Bundle 'rorymckinley/vim-symbols-strings'Bundle 'kana/vim-textobj-user'Bundle 'skalnik/vim-vroom'Bundle 'Shougo/vimproc'Bundle 'goldfeld/vim-seek'Bundle 'Raimondi/delimitMate'" vim-scripts reposBundle 'c.vim'Bundle 'L9'Bundle 'genutils'Bundle 'CSApprox'Bundle 'FuzzyFinder'Bundle 'AutoComplPop'Bundle 'CSApprox'Bundle 'dbext.vim'Bundle 'genutils'Bundle 'IComplete'Bundle 'DfrankUtil'Bundle 'YankRing.vim'Bundle 'ShowMarks'Bundle 'ZoomWin'Bundle 'IndexedSearch'Bundle 'YankRing.vim'Bundle 'SearchComplete'Bundle 'AutoTag'Bundle 'Rainbow-Parenthesis'Bundle 'keepcase.vim'Bundle 'scratch.vim'Bundle 'indenthtml.vim'Bundle 'bash-support.vim'Bundle 'taglist.vim'Bundle 'SQLUtilities'Bundle 'VimClojure'Bundle 'pydoc.vim'Bundle 'quickfixsigns'Bundle 'vcscommand.vim'Bundle 'visual_studio.vim'" non github repos Bundle 'git://git.wincent.com/command-t.git' " ..."couse problems"Bundle 'tomtom/quickfixsigns_vim'"Bundle 'jeetsukumaran/vim-buffergator'"Bundle 'VB.NET-Syntax'"------------------------------------------------ filetype plugin indent on " required!" " Brief help" :BundleList - list configured bundles " :BundleInstall(!) - install(update) bundles" :BundleSearch(!) foo - search(or refresh cache first) for foo " :BundleClean(!) - confirm(or auto-approve) removal of unused bundles" " see :h vundle for more details or wiki for FAQ" NOTE: comments after Bundle command are not allowed.. "------------------------------------------------------" Highlighting {{{if &t_Co > 2 || has('gui_running')   " switch syntax highlighting on, when the terminal has colorssyntax onendif" }}}"Increasing or decreasing numbers add the alpha option."http://vim.wikia.com/wiki/VimTip30set nrformats+=alphaset fileformats="unix,dos,mac"set formatoptions+=1 " When wrapping paragraphs, don't end lines with 1-letter words (looks stupid)set nocp"evita crear archivos de respaldoset nobackup	set nowritebackupset noswapfile	set directory=~/vimfiles/tmp,~/tmp,/tmp" store swap files in one of these directories" (in case swapfile is ever turned on)set viminfo='20,\"80 " read/write a .viminfo file, don't store more" than 80 lines of registersset wildmenu " make tab completion for files/buffers act like bashset wildmode=list:full " show a list when pressing tab and complete" first full matchset visualbell " don't beepset noerrorbells " don't beepset showcmd " show (partial) command in the last line of the screen" this also shows visual selection info" set nomodeline " disable mode lines (security measure)set modeline " disable mode lines (security measure)"set ttyfast " always use a fast terminalset cursorline " underline the current line, for quick orientation" }}}"guarda el archivo en cuanto se deja el bufferset autowriteset autoread" use utf8 encoding for vim files and for default file encodingset fenc=utf-8set encoding=utf-8set fileencoding=utf-8"establece el esquema de coloresif has('gui_running')    set background=light    hi CursorLine guibg=#e6e6fa    hi CursorColumn guibg=#e6e6faelse    set background=dark    hi CursorLine guibg=Gray40 guifg=#ffffff    hi CursorColumn guibg=Gray40 guifg=#ffffffendifsyntax enable"set background=dark"colorscheme solarized"let g:solarized_termcolors=256"colorscheme proman"colorscheme Monokaicolorscheme eclipse" colorscheme badwolf"colorscheme mustang"colorscheme wombat"colorscheme github"colorscheme smyck"colorscheme railscasts"colorscheme bandit "like visual studio"colorscheme blackboard "like visual studio"colorscheme default"habilita plugin para sangrado de lineasfiletype plugin indent on"habilita soporte para pluginsfiletype plugin on"muestra numeros de linea del archivoset nu"forza a que la linea no se salte a la siguiente cuando no cabe en la ventana actualset wrap!"set textwidth=79set textwidth=85set formatoptions=qrn1set colorcolumn=100"habilita sangrado inteligenteset smartindent"sangrado automaticoset ai"define el numero espacios para la tecla <TAB>"use 4 spaces for tabs set tabstop=4 softtabstop=4 shiftwidth=4 " display indentation guidesset tabstop=4set shiftwidth=4set expandtabset shiftround " use multiple of shiftwidth when indenting with '<' and '>'set scrolloff=4 " keep 4 lines off the edges of the screen when scrollingset virtualedit=all " allow the cursor to go in to "invalid" placesset backspace=indent,eol,start " allow backspacing over everything in insert modeset autoindent " always set autoindenting onset copyindent " copy the previous indentation on autoindenting"Use Mark plugin to highlight selected wordset hlsearch"jumps to search word as you type (annoying but excellent)set smarttab " insert tabs on the start of a line according to shiftwidth, not tabstopset incsearch " show search matches as you type"Caso insesitivo para busquedas es decir no distingue mayusculas y minusculasset ignorecase"case-sensitive if search contains an uppercase characterset smartcaseset gdefault " search/replace "globally" (on a line) by defaultset showmatch"estable el modo de pliegue (folding)set foldmethod=indent "fold based on indentset foldnestmax=10 "deepest fold is 10 levels"set nofoldenable "dont fold by defaultset foldlevel=1	"this is just what i Use" Folding : http://vim.wikia.com/wiki/Syntax-based_folding, see comment by Ostrygen" au FileType cs set omnifunc=syntaxcomplete#Complete" Folding rules {{{set foldenable " enable foldingset foldcolumn=2 " add a fold columnset foldmethod=marker " detect triple-{ style fold markersset foldlevelstart=99 " start out with everything foldedset foldopen=block,hor,insert,jump,mark,percent,quickfix,search,tag,undo" which commands trigger auto-unfoldfunction! MyFoldText()let line = getline(v:foldstart)let nucolwidth = &fdc + &number * &numberwidthlet windowwidth = winwidth(0) - nucolwidth - 3let foldedlinecount = v:foldend - v:foldstart" expand tabs into spaces    let onetab = strpart(' ', 0, &tabstop)    let line = substitute(line, '\t', onetab, 'g')    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))    let fillcharcount = windowwidth - len(line) - len(foldedlinecount) - 4    return line . ' �' . repeat(" ",fillcharcount) . foldedlinecount . ' 'endfunctionset foldtext=MyFoldText()" }}}" Editor layout {{{set termencoding=utf-8set encoding=utf-8set lazyredraw " don't update the display while executing macrosset laststatus=2 " tell VIM to always put a status line in, even" if there is only one windowset cmdheight=2 " use a status bar that is 2 rows high" }}}" Vim behaviour {{{set hidden " hide buffers instead of closing them this" means that the current buffer can be put" to background without being written; and" that marks and undo history are preservedset switchbuf=useopen " reveal already opened files from the" quickfix window instead of opening new" buffersset history=1000 " remember more commands and search historyset undolevels=1000 " use many muchos levels of undoif v:version >= 730set undofile " keep a persistent backup file    set undodir=~/vimfiles/tmp,~/tmp,/tmpendifau FileType cs set foldmethod=markerau FileType cs set foldmarker={,}au FileType cs set foldtext=substitute(getline(v:foldstart),'{.*','{...}',)au FileType cs set foldlevelstart=2" Enable omni completion. Not required if they are already set elsewhere in .vimrcautocmd FileType css,less setlocal omnifunc=csscomplete#CompleteCSSautocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTagsautocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJSautocmd FileType python setlocal omnifunc=pythoncomplete#Completeautocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTagsautocmd FileType ruby setlocal omnifunc=rubycomplete#Completeau FileType c,cpp,h set omnifunc=ccomplete#Completeau FileType java set omnifunc=javacomplete#Complete"For the most accurate but slowest result, set the syntax synchronization method to fromstartautocmd BufEnter * :syntax sync fromstart"vbnet highlightingautocmd BufNewFile,BufRead *.vb set ft=vbnet"remarcado de lineas specialeshighlight SpecialKey guifg=#c0c0c0 ctermfg=192"muestra los caracteres ocultos y los remplaza por los establecidos" set listset listchars=tab:\|-,trail:-,eol:�set mouse=a " enable using the mouse if terminal emulatorhighlight NonText guifg=#4a4a59if has('gui_running')"establecer fuente y tama�o    "set guifont=Ubuntu_Mono:h11:cDEFAULT"set guifont=Ubuntu_Mono:h11:cANSI    "set guifont=Consolas:h12:cDEFAULT"set guifont=Sansation_Light:h11:cDEFAULT    "set guifont=Sansation:h11:cDEFAULT"set guifont=ProggyCleanTT:h13:cDEFAULT    "set guifont=DejaVu_Sans_Mono:h10:cDEFAULT"set guifont=Monaco:h9:cDEFAULT    "set guifont=Ubuntu_Mono_for_powerline:h14:cDEFAULTset guifont=Ubuntu_Mono_for_powerline:h11:cANSIset cursorline cursorcolumnendif" indentlinelet g:indentLine_char = '|'"habilita corrector ortografico"set spell spelllang=es_mxset spelllang=es_mx,en "Carga el diccionario en o los lenguajes que necesitemos"set spell "Activa el corrector ortogr�fico en tiempo real :set nospell desactiva"------------------------------------------------------"c compiler" au FileType C set makeprg=gcc\ %" au FileType Cpp set makeprg=g++\ %"------------------------------------------------------"snipMate plugin"https://github.com/msanders/snipmate.vim"------------------------------------------------------"let g:snipMate = {}"let g:snipMate.scope_aliases = {}"let g:snipMate.scope_aliases['cs'] = 'cs'""especifica la ruta en donde se encuentran los snippets para el plugin snipMate"let g:snippets_dir="$HOME\\vimfiles\\bundle\\snipmate\\snippets\\""------------------------------------------------------"------------------------------------------------------"NERDTree plugin"https://github.com/scrooloose/nerdtree""------------------------------------------------------"abre el plugin NERDTree al iniciar Vimautocmd vimenter * NERDTreeautocmd vimenter * if !argc() | NERDTree | endif"cerrar Vim si la unica ventana abierta es la de NERDTreeautocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endiflet g:NERDTreeBookmarksFile = expand($HOME.'_NERDTreeBookmarks')let g:NERDTreeShowBookmarks = 1let g:NERDTreeWinSize = 45let g:NERDTreeChristmasTree = 1let g:NERDTreeCaseSensitiveSort = 1let g:NERDTreeQuitOnOpen = 1let g:NERDTreeMouseMode=2'let g:nerdtree_tabs_open_on_gui_startup=0let g:nerdtree_tabs_open_on_console_startup=0"the working directory is always the one where the active buffer is located.set autochdir"I make sure the working directory is set correctly.let g:NERDTreeChDirMode=2"ignore some file typeslet g:NERDTreeIgnore=[      \'\.pyc$', '\.pyo$', '\.py\$class$', '\.obj$',      \'\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$',      \'\.FxCop$','\.scc$','\.vssscc$','\.ini$', '\.pol$',      \'\.user$', '\.cd$', '\.Cache$', '\.mdf$', '\.ldf$',      \'\.tmp$', '^NTUSER.DAT*', '\.zip$', '\.pdb$', '\.dll$',      \'tags', 'bin', 'obj','\.suo$','\.vspscc$']"------------------------------------------------------"------------------------------------------------------" NERDcommenter" https://github.com/scrooloose/nerdcommenter"------------------------------------------------------let NERDSpaceDelims=1" map <Leader>/ <Plug>NERDCommenterToggle<CR>" vmap <Leader>/ <Plug>NERDCommenterToggle<CR>"------------------------------------------------------""------------------------------------------------------"mini buffer explorer"https://github.com/fholgado/minibufexpl.vim"------------------------------------------------------let g:miniBufExplMapWindowNavVim = 1let g:miniBufExplMapWindowNavArrows = 1let g:miniBufExplMapCTabSwitchBufs = 1let g:miniBufExplModSelTarget = 1" MiniBufExpl Colorshi MBEVisibleActive guifg=#ff4500 guibg=fghi MBEVisibleChangedActive guifg=#F1266F guibg=fghi MBEVisibleChanged guifg=#F1266F guibg=fghi MBEVisibleNormal guifg=#5DC2D6 guibg=fghi MBEChanged guifg=#CD5907 guibg=fghi MBENormal guifg=#808080 guibg=fg"------------------------------------------------------""---------------------------------------------------------"easymotion"https://github.com/Lokaltog/vim-easymotion"---------------------------------------------------------let g:EasyMotion_leader_key = '<Leader>e'hi link EasyMotionTarget ErrorMsghi link EasyMotionShade Comment"---------------------------------------------------------""---------------------------------------------------------"ctrlp"https://github.com/kien/ctrlp.vim"---------------------------------------------------------let g:ctrlp_map = '<c-p>'let g:ctrlp_cache_dir = $HOME.'/ctrlp_cache'let g:ctrlp_max_height = 15let g:ctrlp_clear_cache_on_exit = 1let g:ctrlp_follow_symlinks = 1let g:ctrlp_match_window_bottom = 0set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exelet g:ctrlp_custom_ignore = {      \ 'dir': '\.git$\|\.hg$\|\.svn$',      \ 'file': '\.exe$\|\.so$\|\.dll$',      \ 'link': 'some_bad_symbolic_links',      \ }"let g:ctrlp_user_command = 'find %s -type f' " MacOSX/Linuxlet g:ctrlp_user_command = 'dir %s /-n /b /s /a-d' " Windows"---------------------------------------------------------""--------------------------------------------------------" fugitive" http://www.vim.org/scripts/script.php?script_id=2975" https://github.com/tpope/vim-fugitive"--------------------------------------------------------"--------------------------------------------------------""--------------------------------------------------------" rainbow parentheses" https://github.com/vim-scripts/Rainbow-Parenthesis"--------------------------------------------------------"au VimEnter * RainbowParenthesesToggle"au Syntax * RainbowParenthesesLoadRound"au Syntax * RainbowParenthesesLoadSquare"au Syntax * RainbowParenthesesLoadBraces""--------------------------------------------------------""--------------------------------------------------------" syntastic" https://github.com/scrooloose/syntastic"--------------------------------------------------------let g:syntastic_enable_balloons = 1let g:syntastic_auto_loc_list=2let g:syntastic_auto_jump=0let g:syntastic_enable_signs=1let g:syntastic_mode_map = { 'mode': 'active',\ 'active_filetypes': ['ruby', 'php'],\ 'passive_filetypes': ['puppet'] }"--------------------------------------------------------"default signs" syntastic_error_symbol - For syntax errors, defaults to '>>'" syntastic_style_error_symbol - For style errors, defaults to 'S>'" syntastic_warning_symbol - For syntax warnings, defaults to '>>'" syntastic_style_warning_symbol - For style warnings, defaults to 'S>'"et g:syntastic_error_symbol=''"let g:syntastic_warning_symbol=''"--------------------------------------------------------""--------------------------------------------------------" tabular" https://github.com/godlygeek/tabular"--------------------------------------------------------"--------------------------------------------------------""---------------------------------------------------------"taglist"http://www.vim.org/scripts/script.php?script_id=273"http://ctags.sourceforge.net/"http://vim.sourceforge.net/scripts/script.php?script_id=273"http://sourceforge.net/projects/vim-taglist/files/"http://ctags.sourceforge.net/ctags.html"---------------------------------------------------------" Taglist variables" Display function name in status bar:let g:ctags_statusline=1" Automatically start scriptlet generate_tags=1" Displays taglist results in a vertical window:let Tlist_Use_Horiz_Window=0":!which ctags -> tofindctalocation" Various Taglist diplay config:let Tlist_Use_Right_Window = 1let Tlist_Compact_Format = 1let Tlist_Exit_OnlyWindow = 1let Tlist_GainFocus_On_ToggleOpen = 1let Tlist_File_Fold_Auto_Close = 1let Tlist_Ctags_Cmd = '"C:\cygwin\bin\ctags.exe"'"---------------------------------------------------------""---------------------------------------------------------"easytags"https://github.com/xolox/vim-easytags"---------------------------------------------------------let g:easytags_cmd = '"C:\cygwin\bin\ctags.exe"'let g:easytags_file = '"C:\Users\Proman02\vimfiles\tags"'" let g:easytags_file = $HOME . '/tags'"" search first in current directory then file directory for tag fileset tags=tags,./tagslet g:easytags_dynamic_files=1let g:easytags_always_enabled=0let g:easytags_on_cursorhold=0let g:easytags_auto_highlight=0"---------------------------------------------------------""---------------------------------------------------------"db ext plugin"http://www.vim.org/scripts/script.php?script_id=356"https://mutelight.org/dbext-the-last-sql-client-youll-ever-need"---------------------------------------------------------"connect to sql server instancelet g:dbext_default_profile_sql_qa = 'type=SQLSRV:srvname=10.48.68.8:dbname=amqa:user=espejopruebas:passwd=12345678'let g:dbext_default_profile_sql_qavw = 'type=SQLSRV:srvname=10.48.68.8:dbname=amqavw:user=espejopruebas:passwd=12345678'"---------------------------------------------------------""---------------------------------------------------------"sql formatter"http://www.vim.org/scripts/script.php?script_id=492"https://github.com/vim-scripts/SQLUtilities"---------------------------------------------------------""---------------------------------------------------------"tagbar" http://www.vim.org/scripts/script.php?script_id=3465" https://github.com/majutsushi/tagbar"---------------------------------------------------------let g:tagbar_ctags_bin='"C:\Users\Proman02\vimfiles\ctags58\ctags.exe"' " Proper Ctags locations" let g:tagbar_ctags_bin= $HOME .'/vimfiles/ctags58/ctags.exe' " Proper Ctags locationslet g:tagbar_width=26 " Default is 40, seems too widelet g:tagbar_width = 30let g:tagbar_autoclose = 1let g:tagbar_autofocus = 1let g:tagbar_compact = 1let g:tagbar_expand = 0"---------------------------------------------------------""---------------------------------------------------------"powerline"https://github.com/Lokaltog/vim-powerline.git"https://github.com/Lokaltog/powerline"https://powerline.readthedocs.org/en/latest/"---------------------------------------------------------"source ~/.vim/bundle/powerline/powerline/ext/vim/source_plugin.vimif has("gui_running")    let g:Powerline_symbols = 'fancy'else    let g:Powerline_symbols = 'compatible'endif" set laststatus=2" let g:Powerline_theme='short'" let g:Powerline_colorscheme='solarized256'"---------------------------------------------------------""---------------------------------------------------------"Vim intellisence"http://insenvim.sourceforge.net/"https://github.com/tomtom/checksyntax_vim.git"---------------------------------------------------------let $VIM_INTELLISENSE="C:\\Program Files (x86)\\Vim\\Intellisense\\""---------------------------------------------------------let g:visual_studio_quickfix_errorformat='%.%#%*[0-9>]\ %#%f(%l)\ :\ %m'"---------------------------------------------------------"Showmarks"http://www.vim.org/scripts/script.php?script_id=152"https://github.com/vim-scripts/ShowMarks"---------------------------------------------------------let g:showmarks_enable=0"---------------------------------------------------------"---------------------------------------------------------"vim-indent-guides"https://github.com/nathanaelkane/vim-indent-guides"---------------------------------------------------------let g:indent_guides_start_level=1let g:indent_guides_guide_size=1"let g:indent_guides_start_level=2""setting custom indent colors" let g:indent_guides_auto_colors = 0" autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd guibg=red ctermbg=3" autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4" Indentation style color guideshi IndentGuidesOdd ctermbg=blackhi IndentGuidesEven ctermbg=darkgrey"---------------------------------------------------------""---------------------------------------------------------"vim-session"https://github.com/xolox/vim-session"---------------------------------------------------------let g:session_command_aliases = 1"---------------------------------------------------------""---------------------------------------------------------"javascript-libraries-syntax.vim"https://github.com/othree/javascript-libraries-syntax.vim"---------------------------------------------------------let g:used_javascript_libs = 'underscore,backbone'autocmd BufReadPre *.js let b:javascript_lib_use_jquery = 1autocmd BufReadPre *.js let b:javascript_lib_use_underscore = 1autocmd BufReadPre *.js let b:javascript_lib_use_backbone = 1autocmd BufReadPre *.js let b:javascript_lib_use_prelude = 0autocmd BufReadPre *.js let b:javascript_lib_use_angularjs = 0"---------------------------------------------------------"---------------------------------------------------------"zencoding"https://github.com/mattn/zencoding-vim"http://mattn.github.com/zencoding-vim/"http://coding.smashingmagazine.com/2009/11/21/zen-coding-a-new-way-to-write-html-code/"---------------------------------------------------------let g:user_zen_mode='n' "only enable normal mode functions.let g:user_zen_mode='inv' "enable all functions, which is equal tlet g:user_zen_mode='a' "enable all function in all mode.let g:user_zen_expandabbr_key = '<c-e>'let g:use_zen_complete_tag = 1"---------------------------------------------------------"---------------------------------------------------------"badwolf"https://github.com/sjl/badwolf"---------------------------------------------------------" Make the gutters darker than the background.let g:badwolf_darkgutter = 1" Make the tab line darker than the background.let g:badwolf_tabline = 0" Make the tab line the same color as the background.let g:badwolf_tabline = 1" Make the tab line lighter than the background.let g:badwolf_tabline = 2" Make the tab line much lighter than the background.let g:badwolf_tabline = 3" Turn off HTML link underlininglet g:badwolf_html_link_underline = 0" Turn on CSS properties highlightinglet g:badwolf_css_props_highlight = 1"---------------------------------------------------------""---------------------------------------------------------"https://github.com/tobyS/skeletons.vim"---------------------------------------------------------let g:skeletons_dir=$HOME . '/vimfiles/bundle/skeletons.vim/skeletons/'au BufNewFile * silent! 0r ~/vimfiles/bundle/skeleton.vim/skeletons/skeleton.%:e"---------------------------------------------------------"pdv"https://github.com/tobyS/pdv"---------------------------------------------------------"---------------------------------------------------------let g:pdv_template_dir = $HOME ."/vimfiles/bundle/pdv/templates_snip"" nnoremap <buffer> <C-p> :call pdv#DocumentWithSnip()<CR>"---------------------------------------------------------,V
"https://github.com/tpope/tpope/blob/master/.vimrc"archivos de configuracion auxiliares para windowssource $HOME/vimfiles/mswin.vim" Key mappings, functions, autocommandssource $HOME/vimfiles/keymap.vimset digraph"pathogen plugin:"https://github.com/tpope/vim-pathogen"------------------------------------------------------call pathogen#infect()call pathogen#helptags()"------------------------------------------------------"vundle "https://github.com/gmarik/vundle"------------------------------------------------------set nocompatible " be iMproved"filetype off " required!set rtp+=~/vimfiles/bundle/vundle/"let g:bundle_dir=$HOME.'/vimfiles/bundle/vundle/'" let g:bundle_dir='/cygdrive/c/Users/Proman02/vimfiles/bundle/'call vundle#rc()"" let Vundle manage Vundle"" required!Bundle 'gmarik/vundle'" My Bundles here: "" original repos on githubBundle 'scrooloose/nerdtree'Bundle 'tpope/vim-surround'Bundle 'tpope/vim-repeat'Bundle 'tpope/vim-fugitive'Bundle 'tpope/vim-abolish'Bundle 'tpope/vim-unimpaired'Bundle 'tpope/vim-commentary'Bundle 'Lokaltog/vim-easymotion'Bundle 'kien/ctrlp.vim'Bundle 'scrooloose/nerdcommenter'Bundle 'drmingdrmer/xptemplate'Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}Bundle 'mileszs/ack.vim'Bundle 'tpope/vim-endwise'Bundle 'tpope/vim-cucumber'Bundle 'tpope/vim-ragtag'Bundle 'tpope/vim-rails'Bundle 'tpope/vim-bundler'Bundle 'tpope/gem-ctags'Bundle 'mattn/gist-vim'Bundle 'othree/html5.vim'Bundle 'mattsacks/vim-complete'Bundle 'othree/javascript-libraries-syntax.vim'Bundle 'Lokaltog/vim-powerline'Bundle 'SirVer/ultisnips'Bundle 'tobyS/skeletons.vim'Bundle 'kana/vim-skeleton'Bundle 'tobyS/pdv'Bundle 'majutsushi/tagbar'Bundle 'shemerey/vim-indexer'Bundle 'esukram/autocomplpop.vim'Bundle 'sjl/gundo.vim'Bundle 'ervandew/supertab'Bundle 'Rip-Rip/clang_complete'Bundle 'mattn/webapi-vim'Bundle 'c9s/perlomni.vim'Bundle 'Townk/vim-autoclose'Bundle 'Shougo/neosnippet'Bundle 'tomtom/tcomment_vim'Bundle 'mattn/lisper-vim.git'Bundle 'chrisbra/SaveSigns.vim'Bundle 'scrooloose/syntastic'Bundle 'valloric/MatchTagAlways'Bundle 'plasticboy/vim-markdown'Bundle 'chrisbra/NrrwRgn'Bundle 'itspriddle/vim-jquery'Bundle 'mattn/zencoding-vim'Bundle 'godlygeek/csapprox'Bundle 'altercation/vim-colors-solarized'Bundle 'godlygeek/tabular'Bundle 'majutsushi/tagbar.git'Bundle 'SirVer/ultisnips'Bundle 'me-vlad/python-syntax.vim'Bundle 'vim-scripts/dbext.vim'Bundle 'vim-scripts/DrawIt'Bundle 'powerman/vim-plugin-viewdoc'Bundle 'xolox/vim-shell'Bundle 'Shougo/vimshell'Bundle 'othree/javascript-libraries-syntax.vim'Bundle 'spf13/PIV'Bundle 'MarcWeber/vim-addon-mw-utils'Bundle 'gotcha/vimpdb'Bundle 'vim-perl/vim-perl'Bundle 'Shougo/vimproc'Bundle 'xolox/vim-session'Bundle 'Lokaltog/vim-powerline.git'Bundle 'stephenmckinney/vim-solarized-powerline'Bundle 'Lokaltog/powerline-fonts.git'Bundle 'vim-scripts/QuickBuf'Bundle 'hynek/vim-python-pep8-indent'Bundle 'wavded/vim-stylus'Bundle 'heaths/vim-msbuild'Bundle 'nathanaelkane/vim-indent-guides'Bundle 'Rykka/colorv.vim'Bundle 'AndrewRadev/sideways.vim'Bundle 'AndrewRadev/switch.vim'Bundle 'leshill/vim-json'Bundle 'rking/ag.vim'Bundle 'mutewinter/tomdoc.vim'Bundle 'jc00ke/vim-tomdoc'Bundle 'mutewinter/taskpaper.vim'Bundle 'mutewinter/vim-css3-syntax'Bundle 'jwu/exvim'Bundle 'xolox/vim-lua-ftplugin'Bundle 'xolox/vim-lua-inspect'Bundle 'kablamo/VimDebug'Bundle 'sjl/badwolf'Bundle 'alfredodeza/pytest.vim'Bundle 'gagoar/StripWhiteSpaces'Bundle 'nosami/Omnisharp'Bundle 'mattsacks/vim-complete'Bundle 'fholgado/minibufexpl.vim'Bundle 'tsaleh/vim-matchit'Bundle 'icsharpcode/NRefactory'Bundle 'benizi/perl-support.vim'Bundle 'kevinw/pyflakes-vim'Bundle 'klen/python-mode'Bundle 'honza/vim-snippets'Bundle 'tomtom/tlib_vim'Bundle 'jeetsukumaran/vim-buffergator'Bundle 'motemen/git-vim'Bundle 'greyblake/vim-preview'Bundle 'shemerey/vim-project'Bundle 'vim-ruby/vim-ruby'Bundle 'ghewgill/vim-scmdiff'Bundle 'garbas/vim-snipmate'Bundle 'mattsacks/vim-symbols'Bundle 'rorymckinley/vim-symbols-strings'Bundle 'kana/vim-textobj-user'Bundle 'skalnik/vim-vroom'Bundle 'Shougo/vimproc'Bundle 'goldfeld/vim-seek'Bundle 'Raimondi/delimitMate'" vim-scripts reposBundle 'c.vim'Bundle 'L9'Bundle 'genutils'Bundle 'CSApprox'Bundle 'FuzzyFinder'Bundle 'AutoComplPop'Bundle 'CSApprox'Bundle 'dbext.vim'Bundle 'genutils'Bundle 'IComplete'Bundle 'DfrankUtil'Bundle 'YankRing.vim'Bundle 'ShowMarks'Bundle 'ZoomWin'Bundle 'IndexedSearch'Bundle 'YankRing.vim'Bundle 'SearchComplete'Bundle 'AutoTag'Bundle 'Rainbow-Parenthesis'Bundle 'keepcase.vim'Bundle 'scratch.vim'Bundle 'indenthtml.vim'Bundle 'bash-support.vim'Bundle 'taglist.vim'Bundle 'SQLUtilities'Bundle 'VimClojure'Bundle 'pydoc.vim'Bundle 'quickfixsigns'Bundle 'vcscommand.vim'Bundle 'visual_studio.vim'" non github repos Bundle 'git://git.wincent.com/command-t.git' " ..."couse problems"Bundle 'tomtom/quickfixsigns_vim'"Bundle 'jeetsukumaran/vim-buffergator'"Bundle 'VB.NET-Syntax'"------------------------------------------------ filetype plugin indent on " required!" " Brief help" :BundleList - list configured bundles " :BundleInstall(!) - install(update) bundles" :BundleSearch(!) foo - search(or refresh cache first) for foo " :BundleClean(!) - confirm(or auto-approve) removal of unused bundles" " see :h vundle for more details or wiki for FAQ" NOTE: comments after Bundle command are not allowed.. "------------------------------------------------------" Highlighting {{{if &t_Co > 2 || has('gui_running')   " switch syntax highlighting on, when the terminal has colorssyntax onendif" }}}"Increasing or decreasing numbers add the alpha option."http://vim.wikia.com/wiki/VimTip30set nrformats+=alphaset fileformats="unix,dos,mac"set formatoptions+=1 " When wrapping paragraphs, don't end lines with 1-letter words (looks stupid)set nocp"evita crear archivos de respaldoset nobackup	set nowritebackupset noswapfile	set directory=~/vimfiles/tmp,~/tmp,/tmp" store swap files in one of these directories" (in case swapfile is ever turned on)set viminfo='20,\"80 " read/write a .viminfo file, don't store more" than 80 lines of registersset wildmenu " make tab completion for files/buffers act like bashset wildmode=list:full " show a list when pressing tab and complete" first full matchset visualbell " don't beepset noerrorbells " don't beepset showcmd " show (partial) command in the last line of the screen" this also shows visual selection info" set nomodeline " disable mode lines (security measure)set modeline " disable mode lines (security measure)"set ttyfast " always use a fast terminalset cursorline " underline the current line, for quick orientation" }}}"guarda el archivo en cuanto se deja el bufferset autowriteset autoread" use utf8 encoding for vim files and for default file encodingset fenc=utf-8set encoding=utf-8set fileencoding=utf-8"establece el esquema de coloresif has('gui_running')    set background=light    hi CursorLine guibg=#e6e6fa    hi CursorColumn guibg=#e6e6faelse    set background=dark    hi CursorLine guibg=Gray40 guifg=#ffffff    hi CursorColumn guibg=Gray40 guifg=#ffffffendifsyntax enable"set background=dark"colorscheme solarized"let g:solarized_termcolors=256"colorscheme proman"colorscheme Monokaicolorscheme eclipse" colorscheme badwolf"colorscheme mustang"colorscheme wombat"colorscheme github"colorscheme smyck"colorscheme railscasts"colorscheme bandit "like visual studio"colorscheme blackboard "like visual studio"colorscheme default"habilita plugin para sangrado de lineasfiletype plugin indent on"habilita soporte para pluginsfiletype plugin on"muestra numeros de linea del archivoset nu"forza a que la linea no se salte a la siguiente cuando no cabe en la ventana actualset wrap!"set textwidth=79set textwidth=85set formatoptions=qrn1set colorcolumn=100"habilita sangrado inteligenteset smartindent"sangrado automaticoset ai"define el numero espacios para la tecla <TAB>"use 4 spaces for tabs set tabstop=4 softtabstop=4 shiftwidth=4 " display indentation guidesset tabstop=4set shiftwidth=4set expandtabset shiftround " use multiple of shiftwidth when indenting with '<' and '>'set scrolloff=4 " keep 4 lines off the edges of the screen when scrollingset virtualedit=all " allow the cursor to go in to "invalid" placesset backspace=indent,eol,start " allow backspacing over everything in insert modeset autoindent " always set autoindenting onset copyindent " copy the previous indentation on autoindenting"Use Mark plugin to highlight selected wordset hlsearch"jumps to search word as you type (annoying but excellent)set smarttab " insert tabs on the start of a line according to shiftwidth, not tabstopset incsearch " show search matches as you type"Caso insesitivo para busquedas es decir no distingue mayusculas y minusculasset ignorecase"case-sensitive if search contains an uppercase characterset smartcaseset gdefault " search/replace "globally" (on a line) by defaultset showmatch"estable el modo de pliegue (folding)set foldmethod=indent "fold based on indentset foldnestmax=10 "deepest fold is 10 levels"set nofoldenable "dont fold by defaultset foldlevel=1	"this is just what i Use" Folding : http://vim.wikia.com/wiki/Syntax-based_folding, see comment by Ostrygen" au FileType cs set omnifunc=syntaxcomplete#Complete" Folding rules {{{set foldenable " enable foldingset foldcolumn=2 " add a fold columnset foldmethod=marker " detect triple-{ style fold markersset foldlevelstart=99 " start out with everything foldedset foldopen=block,hor,insert,jump,mark,percent,quickfix,search,tag,undo" which commands trigger auto-unfoldfunction! MyFoldText()let line = getline(v:foldstart)let nucolwidth = &fdc + &number * &numberwidthlet windowwidth = winwidth(0) - nucolwidth - 3let foldedlinecount = v:foldend - v:foldstart" expand tabs into spaces    let onetab = strpart(' ', 0, &tabstop)    let line = substitute(line, '\t', onetab, 'g')    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))    let fillcharcount = windowwidth - len(line) - len(foldedlinecount) - 4    return line . ' ?' . repeat(" ",fillcharcount) . foldedlinecount . ' 'endfunctionset foldtext=MyFoldText()" }}}" Editor layout {{{set termencoding=utf-8set encoding=utf-8set lazyredraw " don't update the display while executing macrosset laststatus=2 " tell VIM to always put a status line in, even" if there is only one windowset cmdheight=2 " use a status bar that is 2 rows high" }}}" Vim behaviour {{{set hidden " hide buffers instead of closing them this" means that the current buffer can be put" to background without being written; and" that marks and undo history are preservedset switchbuf=useopen " reveal already opened files from the" quickfix window instead of opening new" buffersset history=1000 " remember more commands and search historyset undolevels=1000 " use many muchos levels of undoif v:version >= 730set undofile " keep a persistent backup file    set undodir=~/vimfiles/tmp,~/tmp,/tmpendifau FileType cs set foldmethod=markerau FileType cs set foldmarker={,}au FileType cs set foldtext=substitute(getline(v:foldstart),'{.*','{...}',)au FileType cs set foldlevelstart=2" Enable omni completion. Not required if they are already set elsewhere in .vimrcautocmd FileType css,less setlocal omnifunc=csscomplete#CompleteCSSautocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTagsautocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJSautocmd FileType python setlocal omnifunc=pythoncomplete#Completeautocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTagsautocmd FileType ruby setlocal omnifunc=rubycomplete#Completeau FileType c,cpp,h set omnifunc=ccomplete#Completeau FileType java set omnifunc=javacomplete#Complete"For the most accurate but slowest result, set the syntax synchronization method to fromstartautocmd BufEnter * :syntax sync fromstart"vbnet highlightingautocmd BufNewFile,BufRead *.vb set ft=vbnet"remarcado de lineas specialeshighlight SpecialKey guifg=#c0c0c0 ctermfg=192"muestra los caracteres ocultos y los remplaza por los establecidos" set listset listchars=tab:\|-,trail:-,eol:?set mouse=a " enable using the mouse if terminal emulatorhighlight NonText guifg=#4a4a59if has('gui_running')"establecer fuente y tama?o    "set guifont=Ubuntu_Mono:h11:cDEFAULT"set guifont=Ubuntu_Mono:h11:cANSI    "set guifont=Consolas:h12:cDEFAULT"set guifont=Sansation_Light:h11:cDEFAULT    "set guifont=Sansation:h11:cDEFAULT"set guifont=ProggyCleanTT:h13:cDEFAULT    "set guifont=DejaVu_Sans_Mono:h10:cDEFAULT"set guifont=Monaco:h9:cDEFAULT    "set guifont=Ubuntu_Mono_for_powerline:h14:cDEFAULTset guifont=Ubuntu_Mono_for_powerline:h11:cANSIset cursorline cursorcolumnendif" indentlinelet g:indentLine_char = '|'"habilita corrector ortografico"set spell spelllang=es_mxset spelllang=es_mx,en "Carga el diccionario en o los lenguajes que necesitemos"set spell "Activa el corrector ortogr?fico en tiempo real :set nospell desactiva"------------------------------------------------------"c compiler" au FileType C set makeprg=gcc\ %" au FileType Cpp set makeprg=g++\ %"------------------------------------------------------"snipMate plugin"https://github.com/msanders/snipmate.vim"------------------------------------------------------"let g:snipMate = {}"let g:snipMate.scope_aliases = {}"let g:snipMate.scope_aliases['cs'] = 'cs'""especifica la ruta en donde se encuentran los snippets para el plugin snipMate"let g:snippets_dir="$HOME\\vimfiles\\bundle\\snipmate\\snippets\\""------------------------------------------------------"------------------------------------------------------"NERDTree plugin"https://github.com/scrooloose/nerdtree""------------------------------------------------------"abre el plugin NERDTree al iniciar Vimautocmd vimenter * NERDTreeautocmd vimenter * if !argc() | NERDTree | endif"cerrar Vim si la unica ventana abierta es la de NERDTreeautocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endiflet g:NERDTreeBookmarksFile = expand($HOME.'_NERDTreeBookmarks')let g:NERDTreeShowBookmarks = 1let g:NERDTreeWinSize = 45let g:NERDTreeChristmasTree = 1let g:NERDTreeCaseSensitiveSort = 1let g:NERDTreeQuitOnOpen = 1let g:NERDTreeMouseMode=2'let g:nerdtree_tabs_open_on_gui_startup=0let g:nerdtree_tabs_open_on_console_startup=0"the working directory is always the one where the active buffer is located.set autochdir"I make sure the working directory is set correctly.let g:NERDTreeChDirMode=2"ignore some file typeslet g:NERDTreeIgnore=[      \'\.pyc$', '\.pyo$', '\.py\$class$', '\.obj$',      \'\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$',      \'\.FxCop$','\.scc$','\.vssscc$','\.ini$', '\.pol$',      \'\.user$', '\.cd$', '\.Cache$', '\.mdf$', '\.ldf$',      \'\.tmp$', '^NTUSER.DAT*', '\.zip$', '\.pdb$', '\.dll$',      \'tags', 'bin', 'obj','\.suo$','\.vspscc$']"------------------------------------------------------"------------------------------------------------------" NERDcommenter" https://github.com/scrooloose/nerdcommenter"------------------------------------------------------let NERDSpaceDelims=1" map <Leader>/ <Plug>NERDCommenterToggle<CR>" vmap <Leader>/ <Plug>NERDCommenterToggle<CR>"------------------------------------------------------""------------------------------------------------------"mini buffer explorer"https://github.com/fholgado/minibufexpl.vim"------------------------------------------------------let g:miniBufExplMapWindowNavVim = 1let g:miniBufExplMapWindowNavArrows = 1let g:miniBufExplMapCTabSwitchBufs = 1let g:miniBufExplModSelTarget = 1" MiniBufExpl Colorshi MBEVisibleActive guifg=#ff4500 guibg=fghi MBEVisibleChangedActive guifg=#F1266F guibg=fghi MBEVisibleChanged guifg=#F1266F guibg=fghi MBEVisibleNormal guifg=#5DC2D6 guibg=fghi MBEChanged guifg=#CD5907 guibg=fghi MBENormal guifg=#808080 guibg=fg"------------------------------------------------------""---------------------------------------------------------"easymotion"https://github.com/Lokaltog/vim-easymotion"---------------------------------------------------------let g:EasyMotion_leader_key = '<Leader>e'hi link EasyMotionTarget ErrorMsghi link EasyMotionShade Comment"---------------------------------------------------------""---------------------------------------------------------"ctrlp"https://github.com/kien/ctrlp.vim"---------------------------------------------------------let g:ctrlp_map = '<c-p>'let g:ctrlp_cache_dir = $HOME.'/ctrlp_cache'let g:ctrlp_max_height = 15let g:ctrlp_clear_cache_on_exit = 1let g:ctrlp_follow_symlinks = 1let g:ctrlp_match_window_bottom = 0set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exelet g:ctrlp_custom_ignore = {      \ 'dir': '\.git$\|\.hg$\|\.svn$',      \ 'file': '\.exe$\|\.so$\|\.dll$',      \ 'link': 'some_bad_symbolic_links',      \ }"let g:ctrlp_user_command = 'find %s -type f' " MacOSX/Linuxlet g:ctrlp_user_command = 'dir %s /-n /b /s /a-d' " Windows"---------------------------------------------------------""--------------------------------------------------------" fugitive" http://www.vim.org/scripts/script.php?script_id=2975" https://github.com/tpope/vim-fugitive"--------------------------------------------------------"--------------------------------------------------------""--------------------------------------------------------" rainbow parentheses" https://github.com/vim-scripts/Rainbow-Parenthesis"--------------------------------------------------------"au VimEnter * RainbowParenthesesToggle"au Syntax * RainbowParenthesesLoadRound"au Syntax * RainbowParenthesesLoadSquare"au Syntax * RainbowParenthesesLoadBraces""--------------------------------------------------------""--------------------------------------------------------" syntastic" https://github.com/scrooloose/syntastic"--------------------------------------------------------let g:syntastic_enable_balloons = 1let g:syntastic_auto_loc_list=2let g:syntastic_auto_jump=0let g:syntastic_enable_signs=1let g:syntastic_mode_map = { 'mode': 'active',\ 'active_filetypes': ['ruby', 'php'],\ 'passive_filetypes': ['puppet'] }"--------------------------------------------------------"default signs" syntastic_error_symbol - For syntax errors, defaults to '>>'" syntastic_style_error_symbol - For style errors, defaults to 'S>'" syntastic_warning_symbol - For syntax warnings, defaults to '>>'" syntastic_style_warning_symbol - For style warnings, defaults to 'S>'"et g:syntastic_error_symbol=''"let g:syntastic_warning_symbol=''"--------------------------------------------------------""--------------------------------------------------------" tabular" https://github.com/godlygeek/tabular"--------------------------------------------------------"--------------------------------------------------------""---------------------------------------------------------"taglist"http://www.vim.org/scripts/script.php?script_id=273"http://ctags.sourceforge.net/"http://vim.sourceforge.net/scripts/script.php?script_id=273"http://sourceforge.net/projects/vim-taglist/files/"http://ctags.sourceforge.net/ctags.html"---------------------------------------------------------" Taglist variables" Display function name in status bar:let g:ctags_statusline=1" Automatically start scriptlet generate_tags=1" Displays taglist results in a vertical window:let Tlist_Use_Horiz_Window=0":!which ctags -> tofindctalocation" Various Taglist diplay config:let Tlist_Use_Right_Window = 1let Tlist_Compact_Format = 1let Tlist_Exit_OnlyWindow = 1let Tlist_GainFocus_On_ToggleOpen = 1let Tlist_File_Fold_Auto_Close = 1let Tlist_Ctags_Cmd = '"C:\cygwin\bin\ctags.exe"'"---------------------------------------------------------""---------------------------------------------------------"easytags"https://github.com/xolox/vim-easytags"---------------------------------------------------------let g:easytags_cmd = '"C:\cygwin\bin\ctags.exe"'let g:easytags_file = '"C:\Users\Proman02\vimfiles\tags"'" let g:easytags_file = $HOME . '/tags'"" search first in current directory then file directory for tag fileset tags=tags,./tagslet g:easytags_dynamic_files=1let g:easytags_always_enabled=0let g:easytags_on_cursorhold=0let g:easytags_auto_highlight=0"---------------------------------------------------------""---------------------------------------------------------"db ext plugin"http://www.vim.org/scripts/script.php?script_id=356"https://mutelight.org/dbext-the-last-sql-client-youll-ever-need"---------------------------------------------------------"connect to sql server instancelet g:dbext_default_profile_sql_qa = 'type=SQLSRV:srvname=10.48.68.8:dbname=amqa:user=espejopruebas:passwd=12345678'let g:dbext_default_profile_sql_qavw = 'type=SQLSRV:srvname=10.48.68.8:dbname=amqavw:user=espejopruebas:passwd=12345678'"---------------------------------------------------------""---------------------------------------------------------"sql formatter"http://www.vim.org/scripts/script.php?script_id=492"https://github.com/vim-scripts/SQLUtilities"---------------------------------------------------------""---------------------------------------------------------"tagbar" http://www.vim.org/scripts/script.php?script_id=3465" https://github.com/majutsushi/tagbar"---------------------------------------------------------let g:tagbar_ctags_bin='"C:\Users\Proman02\vimfiles\ctags58\ctags.exe"' " Proper Ctags locations" let g:tagbar_ctags_bin= $HOME .'/vimfiles/ctags58/ctags.exe' " Proper Ctags locationslet g:tagbar_width=26 " Default is 40, seems too widelet g:tagbar_width = 30let g:tagbar_autoclose = 1let g:tagbar_autofocus = 1let g:tagbar_compact = 1let g:tagbar_expand = 0"---------------------------------------------------------""---------------------------------------------------------"powerline"https://github.com/Lokaltog/vim-powerline.git"https://github.com/Lokaltog/powerline"https://powerline.readthedocs.org/en/latest/"---------------------------------------------------------"source ~/.vim/bundle/powerline/powerline/ext/vim/source_plugin.vimif has("gui_running")    let g:Powerline_symbols = 'fancy'else    let g:Powerline_symbols = 'compatible'endif" set laststatus=2" let g:Powerline_theme='short'" let g:Powerline_colorscheme='solarized256'"---------------------------------------------------------""---------------------------------------------------------"Vim intellisence"http://insenvim.sourceforge.net/"https://github.com/tomtom/checksyntax_vim.git"---------------------------------------------------------let $VIM_INTELLISENSE="C:\\Program Files (x86)\\Vim\\Intellisense\\""---------------------------------------------------------let g:visual_studio_quickfix_errorformat='%.%#%*[0-9>]\ %#%f(%l)\ :\ %m'"---------------------------------------------------------"Showmarks"http://www.vim.org/scripts/script.php?script_id=152"https://github.com/vim-scripts/ShowMarks"---------------------------------------------------------let g:showmarks_enable=0"---------------------------------------------------------"---------------------------------------------------------"vim-indent-guides"https://github.com/nathanaelkane/vim-indent-guides"---------------------------------------------------------let g:indent_guides_start_level=1let g:indent_guides_guide_size=1"let g:indent_guides_start_level=2""setting custom indent colors" let g:indent_guides_auto_colors = 0" autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd guibg=red ctermbg=3" autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4" Indentation style color guideshi IndentGuidesOdd ctermbg=blackhi IndentGuidesEven ctermbg=darkgrey"---------------------------------------------------------""---------------------------------------------------------"vim-session"https://github.com/xolox/vim-session"---------------------------------------------------------let g:session_command_aliases = 1"---------------------------------------------------------""---------------------------------------------------------"javascript-libraries-syntax.vim"https://github.com/othree/javascript-libraries-syntax.vim"---------------------------------------------------------let g:used_javascript_libs = 'underscore,backbone'autocmd BufReadPre *.js let b:javascript_lib_use_jquery = 1autocmd BufReadPre *.js let b:javascript_lib_use_underscore = 1autocmd BufReadPre *.js let b:javascript_lib_use_backbone = 1autocmd BufReadPre *.js let b:javascript_lib_use_prelude = 0autocmd BufReadPre *.js let b:javascript_lib_use_angularjs = 0"---------------------------------------------------------"---------------------------------------------------------"zencoding"https://github.com/mattn/zencoding-vim"http://mattn.github.com/zencoding-vim/"http://coding.smashingmagazine.com/2009/11/21/zen-coding-a-new-way-to-write-html-code/"---------------------------------------------------------let g:user_zen_mode='n' "only enable normal mode functions.let g:user_zen_mode='inv' "enable all functions, which is equal tlet g:user_zen_mode='a' "enable all function in all mode.let g:user_zen_expandabbr_key = '<c-e>'let g:use_zen_complete_tag = 1"---------------------------------------------------------"---------------------------------------------------------"badwolf"https://github.com/sjl/badwolf"---------------------------------------------------------" Make the gutters darker than the background.let g:badwolf_darkgutter = 1" Make the tab line darker than the background.let g:badwolf_tabline = 0" Make the tab line the same color as the background.let g:badwolf_tabline = 1" Make the tab line lighter than the background.let g:badwolf_tabline = 2" Make the tab line much lighter than the background.let g:badwolf_tabline = 3" Turn off HTML link underlininglet g:badwolf_html_link_underline = 0" Turn on CSS properties highlightinglet g:badwolf_css_props_highlight = 1"---------------------------------------------------------""---------------------------------------------------------"https://github.com/tobyS/skeletons.vim"---------------------------------------------------------let g:skeletons_dir=$HOME . '/vimfiles/bundle/skeletons.vim/skeletons/'au BufNewFile * silent! 0r ~/vimfiles/bundle/skeleton.vim/skeletons/skeleton.%:e"---------------------------------------------------------"pdv"https://github.com/tobyS/pdv"---------------------------------------------------------"---------------------------------------------------------let g:pdv_template_dir = $HOME ."/vimfiles/bundle/pdv/templates_snip"" nnoremap <buffer> <C-p> :call pdv#DocumentWithSnip()<CR>"---------------------------------------------------------,V
"https://github.com/code2k/dot_vim/blob/master/keymap.vim"http://vim.wikia.com/wiki/Mapping_keys_in_Vim_-_Tutorial_(Part_1)"mapea leader a comalet mapleader=",""Go to last edit location with ,.nnoremap ,. '." Map the arrow keys to be based on display lines, not physical lines"map <Down> gj"map <Up> gk" Remap j and k to act as expected when used on long, wrapped, linesnnoremap j gjnnoremap k gk" Easy window navigationnoremap <C-h> <C-w>hnoremap <C-j> <C-w>jnoremap <C-k> <C-w>knoremap <C-l> <C-w>lnnoremap <leader>w <C-w>v<C-w>l" buffer next/previousnnoremap <silent> <leader>< :bp<CR>nnoremap <silent> <leader>> :bn<CR>" Create window splits easier. The default" way is Ctrl-w,v and Ctrl-w,s. I remap" this to vv and ssnnoremap <silent> vv <C-w>vnnoremap <silent> ss <C-w>s" Adjust viewports to the same sizennoremap <Leader>= <C-w>=" Easy close windows with Qnnoremap <silent> Q <C-w>c" taken from: http://stackoverflow.com/questions/356126/how-can-you-automatically-remove-trailing-whitespace-in-vim/1618401#1618401fun! <SID>StripTrailingWhitespaces()    let l = line(".")    let c = col(".")    %s/\s\+$//e    call cursor(l, c)endfun" auto-strip trailing white space for ruby files"autocmd BufWritePre *.rb :call <SID>StripTrailingWhitespaces()" command to strip white space from any filennoremap <leader>s :call <SID>StripTrailingWhitespaces()<cr>" reindent complete file without losing positionnnoremap <leader>if mqHmwgg=G`wzt`q" copy current filename into system clipboard - mnemonic: (c)urrent(f)ilename" this is helpful to paste someone the path you're looking atnnoremap <silent>,cf :let @* = expand("%:~")<CR>nnoremap <silent>,cn :let @* = expand("%:t")<CR>"Clear current search highlight by double tapping //nnoremap <silent> // :nohlsearch<CR>" Type ,hl to toggle highlighting on/off, and show current value.noremap ,hl :set hlsearch! hlsearch?<CR>" cd to the directory containing the file in the buffermap <silent><leader>cd :lcd %:h<CR>" Create the directory containing the file in the buffermap <silent><leader>md :!mkdir -p %:p:h<CR>" Bubble single lines" nmap <C-Up> [e" nmap <C-Down> ]e" nmap <C-k> [e" nmap <C-j> ]e" Bubble multiple lines" vmap <C-Up> [egv" vmap <C-Down> ]egv" vmap <C-k> [egv" vmap <C-j> ]egv" Make shift-insert work like in Xtermmap <S-Insert> <MiddleMouse>map! <S-Insert> <MiddleMouse>" Ackif has("gui_macvim") && has("gui_running")" Command-Shift-F on OSX    map <D-F> :Ack<space>" CMD-Enter to enter new line, doesn't work in terminal    inoremap <D-Enter> <C-o>o    inoremap <D-S-Enter> <C-o>O" ctrl-opt- left/right for tab movement    nnoremap <silent> <D-A-Left> :tabp<cr>    inoremap <silent> <D-A-Left> <esc>:tabp<cr>    nnoremap <silent> <D-A-Right> :tabn<cr>    inoremap <silent> <D-A-Right> <esc>:tabn<cr>" Resize windows with arrow keys    nnoremap <D-S-Down> <C-w>-    nnoremap <D-S-Left> <C-w><    nnoremap <D-S-Up> <C-w>+    nnoremap <D-S-Right> <C-w>>" Apple-* Highlight all occurrences of current word (like '*' but without moving)" http://vim.wikia.com/wiki/Highlight_all_search_pattern_matches    nnoremap <D-*> :let @/='\<<C-R>=expand("<cword>")<CR>\>'<CR>:set hls<CR>else" Define <C-F> to a dummy value to see if it would set <C-f> as well.    map <C-F> :dummy    if maparg("<C-f>") == ":dummy"" <leader>f on systems where <C-f> == <C-F>        map <leader-f> :Ack<space>    else" <C-F> if we can still map <C-f> to <S-Down>        map <C-F> :Ack<space>    endif    map <C-f> <S-Down>" CMD-Enter to enter new line, doesn't work in terminal    inoremap <C-Enter> <C-o>o    inoremap <C-S-Enter> <C-o>O" ctrl-opt- left/right for tab movement    nnoremap <silent> <C-A-Left> :tabp<cr>    inoremap <silent> <C-A-Left> <esc>:tabp<cr>    nnoremap <silent> <C-A-Right> :tabn<cr>    inoremap <silent> <C-A-Right> <esc>:tabn<cr>" Resize windows with arrow keys"nnoremap <C-S-Up> <C-w>+"nnoremap <C-S-Down> <C-w>-"nnoremap <C-S-Left> <C-w><"nnoremap <C-S-Right> <C-w>>    nnoremap <C-*> :let @/='\<<C-R>=expand("<cword>")<CR>\>'<CR>:set hls<CR>endif" Zoom Window to Full Sizennoremap <silent> <leader>z :ZoomWin<CR>" GUndonnoremap ,u :GundoToggle<CR>" ctrlpnnoremap <C-p> :CtrlP<CR>inoremap <C-p> <esc>:CtrlP<CR>nnoremap <C-b> :CtrlPBuffer<CR>inoremap <C-b> <esc>:CtrlPBuffer<CR>nnoremap <C-l> :CtrlPMRUFiles<CR>inoremap <C-l> <esc>:CtrlPMRUFiles<CR>nnoremap <C-t> :CtrlPBufTag<CR>inoremap <C-t> <esc>:CtrlPBufTag<CR>" Surround" <leader># Surround a word with #{ruby interpolation}map <leader># ysiw#vmap <leader># c#{<C-R>"}<ESC>" <leader>" Surround a word with "quotes"map <leader>" ysiw"vmap <leader>" c"<C-R>""<ESC>" <leader>' Surround a word with 'single quotes'map <leader>' ysiw'vmap <leader>' c'<C-R>"'<ESC>" <leader>) or <leader>( Surround a word with (parens)" The difference is in whether a space is put inmap <leader>( ysiw(map <leader>) ysiw)vmap <leader>( c( <C-R>" )<ESC>vmap <leader>) c(<C-R>")<ESC>" <leader>[ Surround a word with [brackets]map <leader>] ysiw]map <leader>[ ysiw[vmap <leader>[ c[ <C-R>" ]<ESC>vmap <leader>] c[<C-R>"]<ESC>" <leader>{ Surround a word with {braces}map <leader>} ysiw}map <leader>{ ysiw{vmap <leader>} c{ <C-R>" }<ESC>vmap <leader>{ c{<C-R>"}<ESC>" Tabular"nnoremap <Leader>t= :Tabularize /=<CR>vnoremap <Leader>t= :Tabularize /=<CR>"nnoremap <Leader>t: :Tabularize /:\zs<CR>vnoremap <Leader>t: :Tabularize /:\zs<CR>"nnoremap <Leader>t, :Tabularize /,\zs<CR>vnoremap <Leader>t, :Tabularize /,\zs<CR>nnoremap <Leader>t> :Tabularize /=>\zs<CR>vnoremap <Leader>t> :Tabularize /=>\zs<CR>nnoremap <Leader>t- :Tabularize /-<CR>vnoremap <Leader>t- :Tabularize /-<CR>nnoremap <Leader>t" :Tabularize /"<CR>vnoremap <Leader>t" :Tabularize /"<CR>vmap <Leader>t3 :Tabularize /#<CR>vmap <Leader>t' :Tabularize /'<CR>vmap <Leader>t'' :Tabularize /"<CR>vmap <Leader>t0 :Tabularize /)/r1c1l0<CR>vmap <Leader>t== :Tabularize /=/r1c1l0<CR>" Tagbar toggle" o=outlinennoremap <Leader>o :TagbarToggle<CR>" neocomplcache activationinoremap <expr><c-space> pumvisible() ? "\<C-n>" : "\<C-x>\<C-u>"inoremap <expr><c-CR> neocomplcache#smart_close_popup() . "\<CR>"inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>""--------------------------------------------"proman"--------------------------------------------"nerdtree""I make sure the working directory is set correctly.nmap <leader>l :set list!<CR>"I hit <leader>n to open NERDTree."nnoremap <leader>n :NERDTree .<CR>"mapea las teclas Ctrl+n para abrir NERDTreennoremap <leader>n :NERDTreeToggle<CR>"nmap <silent><Leader>nt :NERDTreeMirrorToggle<CR>"ctrl-pnmap <leader>b :CtrlPBuffer<CR>nmap <leader>m :CtrlPMRUFiles<CR>"Fugitivenmap <silent> <leader>gs :Gstatus<CR>nmap <silent> <leader>gd :Gdiff<CR>nmap <silent> <leader>gc :Gcommit<CR>nmap <silent> <leader>gb :Gblame<CR>nmap <silent> <leader>gl :Glog<CR>nmap <silent> <leader>gp :Git push<CR>" Shorter commands to toggle Taglist displaynnoremap TT :TlistToggle<CR>map <C-F4> :TlistToggle<CR>nnoremap ,T :Tlist<CR>nnoremap ,U :TlistUpdate<CR>nnoremap ,s :TlistSessionSave tlist<CR>nnoremap ,l :TlistSessionLoad tlist<CR>"Search and destroy using tags"map <C-F12> :!C:\cygwin\home\Proman02\vimfiles\ctags58\ctags.exe -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>map <C-F12> :!C:\cygwin\bin\ctags.exe -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>"sql formattervmap <silent>sf <Plug>SQLU_Formatter<CR>nmap <silent>scl <Plug>SQLU_CreateColumnList<CR>nmap <silent>scd <Plug>SQLU_GetColumnDef<CR>nmap <silent>scdt <Plug>SQLU_GetColumnDataType<CR>nmap <silent>scp <Plug>SQLU_CreateProcedure<CR>"tagbarnmap <silent><leader>T :TagbarToggle<CR>"noremap <silent> <Leader>y :TagbarToggle " Display panel with y (or ,y)"Command-tnnoremap <silent> <Leader>t :CommandT<CR>nnoremap <silent> <Leader>b :CommandTBuffer<CR>"vim-indent-guides"Show ident lines"map <F2> <leader>ig"sidewisennoremap <c-h> :SidewaysLeft<cr>nnoremap <c-l> :SidewaysRight<cr>" This command will execute the file, for example, if this is an" HTML file, it will run:" start c:\absolute\filename.html" nnoremap <silent> <C-F6> :let old_reg=@"<CR>:let @"=substitute(expand("%:p"), "/", "\\", "g")<CR>:silent!!cmd /cstart <C-R><C-R>"<CR><CR>:let @"=old_reg<CR>command Preview :!"C:\Program Files\Mozilla Firefox\firefox.exe" %<CR>" Toggle the quickfix window {{{" From Steve Losh, http://learnvimscriptthehardway.stevelosh.com/chapters/38.htmlnnoremap <leader>qf :call <SID>QuickfixToggle()<cr>let g:quickfix_is_open = 0function! s:QuickfixToggle()    if g:quickfix_is_open        cclose        let g:quickfix_is_open = 0        execute g:quickfix_return_to_window . "wincmd w"    else        let g:quickfix_return_to_window = winnr()        copen        let g:quickfix_is_open = 1    endifendfunction" }}}" Toggle the foldcolumn {{{nnoremap <leader>fc :call FoldColumnToggle()<cr>let g:last_fold_column_width = 4 " Pick a sane default for the foldcolumnfunction! FoldColumnToggle()    if &foldcolumn        let g:last_fold_column_width = &foldcolumn        setlocal foldcolumn=0    else        let &l:foldcolumn = g:last_fold_column_width    endifendfunction" }}}" Use Q for formatting the current paragraph (or visual selection)vnoremap Q gqnnoremap Q gqap" Shortcut to makennoremap mk :make<CR>" Quick yanking to the end of the linennoremap Y y$" Yank/paste to the OS clipboard with ,y and ,pnnoremap <leader>y "+ynnoremap <leader>Y "+yynnoremap <leader>p "+pnnoremap <leader>P "+P" YankRing stufflet g:yankring_history_dir = $HOME.'/vimfiles/tmp'nnoremap <leader>r :YRShow<CR>" Edit the vimrc filennoremap <silent> <leader>ev :e $MYVIMRC<CR>nnoremap <silent> <leader>sv :so $MYVIMRC<CR>" Edit the vimrc filennoremap <silent> <leader>ev :e $MYVIMRC<CR>nnoremap <silent> <leader>sv :so $MYVIMRC<CR>" Clears the search registernnoremap <silent> <leader>/ :nohlsearch<CR>" Pull word under cursor into LHS of a substitute (for quick search and" replace)nnoremap <leader>z :%s#\<<C-r>=expand("<cword>")<CR>\>#" Keep search matches in the middle of the window and pulse the line when moving" to them.nnoremap n n:call PulseCursorLine()<cr>nnoremap N N:call PulseCursorLine()<cr>" Quickly get out of insert mode without your fingers having to leave the" home row (either use 'jj' or 'jk')inoremap jj <Esc>" Quick alignment of textnnoremap <leader>al :left<CR>nnoremap <leader>ar :right<CR>nnoremap <leader>ac :center<CR>" Sudo to writecnoremap w!! w !sudo tee % >/dev/null" Jump to matching pairs easily, with Tabnnoremap <Tab> %vnoremap <Tab> %" Foldingnnoremap <Space> zavnoremap <Space> za" Ack for the word under cursor"nnoremap <leader>a :Ack<Space>nnoremap <leader>a :Ack<Space><c-r><c-W>" Creating folds for tags in HTML"nnoremap <leader>ft Vatzf" Reselect text that was just pasted with ,vnnoremap <leader>v V`]"http://vim.usrsb.in/117060445"can resize your windows using Alt plus an arrow key.nnoremap <A-Right> :vertical res +1<cr>nnoremap <A-Up> :res +1<cr>nnoremap <A-Down> :res -1<cr>nnoremap <A-Left> :vertical res -1<cr>"--------------------------------------------" autocmd FileType csproj nnoremap <F5> :make /t:rebuild<CR>nnoremap <F5> :make /t:rebuild<CR>"highlight all words when press <CR>let g:highlighting = 0function! Highlighting()  if g:highlighting == 1 && @/ =~ '^\\<'.expand('<cword>').'\\>$'    let g:highlighting = 0    return ":silent nohlsearch\<CR>"  endif  let @/ = '\<'.expand('<cword>').'\>'  let g:highlighting = 1  return ":silent set hlsearch\<CR>"endfunctionnnoremap <silent> <expr> <CR> Highlighting()nnoremap <silent> <expr> <2-LeftMouse> Highlighting()"insert automatically } and insert above {inoremap {<CR> {<CR>}<Esc>O,V
http://stackoverflow.com/questions/356126/how-can-you-automatically-remove-trailing-whitespace-in-vim/1618401#1618401,v
ack-grep,v
{System.IO.DirectoryNotFoundException: No se puede encontrar una parte de la ruta de acceso 'C:\Windows\Microsoft.NET\Framework64\v2.0.50727\Temporary ASP.NET Files\mmc.automarsh.derivacion.service\4ae4b7bc\1d750579\assembly\dl3\db475444\9f72e76c_6240ce01\PrivateKeys\pub_key_hdi.pke'.   en System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)   en System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy)   en System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, String msgPath, Boolean bFromProxy)   en System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)   en System.IO.StreamReader..ctor(String path, Encoding encoding, Boolean detectEncodingFromByteOrderMarks, Int32 bufferSize)   en System.IO.StreamReader..ctor(String path, Encoding encoding)   en System.IO.File.ReadAllText(String path, Encoding encoding)   en MMC.AutoMarsh.Derivacion.Business.DerivacionBase.ValidarToken(String token, Aseguradoras aseguradora) en C:\inetpub\wwwroot\AUTOMARSH_SitiosEsp\Framework35\MMC.AutoMarsh.Derivacion\MMC.AutoMarsh.Derivacion.Business\DerivacionBase.cs:línea 136   en MMC.AutoMarsh.Derivacion.Business.DerivacionHDI.DerivarHDI(SolicitudDerivacionHDI solicitud) en C:\inetpub\wwwroot\AUTOMARSH_SitiosEsp\Framework35\MMC.AutoMarsh.Derivacion\MMC.AutoMarsh.Derivacion.Business\DerivacionHDI.cs:línea 59}No se puede encontrar una parte de la ruta de acceso 'c:\windows\system32\inetsrv\PrivateKeys\pub_key_hdi.pke'.file:\C:\inetpub\wwwroot\AUTOMARSH_SitiosEsp\Framework35\MMC.AutoMarsh.Derivacion\MMC.AutoMarsh.Derivacion.Service\bin   en MMC.AutoMarsh.Derivacion.Business.DerivacionHDI.DerivarHDI(SolicitudDerivacionHDI solicitud) en C:\inetpub\wwwroot\AUTOMARSH_SitiosEsp\Framework35\MMC.AutoMarsh.Derivacion\MMC.AutoMarsh.Derivacion.Business\DerivacionHDI.cs:línea 201   en MMC.AutoMarsh.Derivacion.Service.WCFDerivacion.DerivarHDI(SolicitudDerivacionHDI solicitud) en C:\inetpub\wwwroot\AUTOMARSH_SitiosEsp\Framework35\MMC.AutoMarsh.Derivacion\MMC.AutoMarsh.Derivacion.Service\WCFDerivacion.svc.cs:línea 56C:\inetpub\wwwroot\AUTOMARSH_SitiosEsp\Framework35\MMC.AutoMarsh.Derivacion\MMC.AutoMarsh.Derivacion.Service\binC:\inetpub\wwwroot\AUTOMARSH_SitiosEsp\Framework35\MMC.AutoMarsh.Derivacion\MMC.AutoMarsh.Derivacion.Service\bin\PrivateKeys\pub_key_hdi.pke   en MMC.AutoMarsh.Derivacion.Business.DerivacionHDI.DerivarHDI(SolicitudDerivacionHDI solicitud) en C:\inetpub\wwwroot\AUTOMARSH_SitiosEsp\Framework35\MMC.AutoMarsh.Derivacion\MMC.AutoMarsh.Derivacion.Business\DerivacionHDI.cs:línea 201   en MMC.AutoMarsh.Derivacion.Service.WCFDerivacion.DerivarHDI(SolicitudDerivacionHDI solicitud) en C:\inetpub\wwwroot\AUTOMARSH_SitiosEsp\Framework35\MMC.AutoMarsh.Derivacion\MMC.AutoMarsh.Derivacion.Service\WCFDerivacion.svc.cs:línea 56,v
WSHDIDerivacion|Pruebas#01,v
Ph/FcOXYQJMQ0JjG1fQnJuFdFSn5jMvoxSWDRJZffvr9fGAy33Kv0VeXMNNS6tuIkk8IytpkWMfp75WscZab22KO6J4UFDkPgY2NRy1JDdoGmPo4v9LG4Q/H/x73dqE/Trq1cpCeGGGUNvYkAHgklvZxhAaGpOIt0qosW1CfQhU=tluSy74ikTS19WfUf+Sv8Bh4CGpX4LrImxc1dQNNe039i63qjcJOzEW+pXqigIy6uqqbZXI72KII3fYQsoJZ/W80dd+Z3PwpYIoDLq0Ef/bwP6QDrMaPQh+32/m9GdxmmuZvgL6CeOmd/Kc1eGdPmPdbr0m8928swVh5CGG2yk4=,v
gVSPiHotaFEs7NLEml6Hq3lXuN64F/Tlf2o7OTiJoaJzgq4xo6Nkxorvi7qG83Co2tF1F+xndXwpnAzUObx0xdHEESw4r63B9dUlWRCisXMDpIEkSe5PnAYh9pTPv5LlWZDxAz6TWY9KiM1iDVJJm4dEsak+a4GqwUMCKo8eRD4=RQokePz36B6TFSUD/Pn/NSasymkiG1iL9mLlP29CmQhFDF6ijfkmDA0hr7IvVuKtB59l3lAGLm0u/sf++56aLMq2W/2ISwTMAxvH1FnvV6PliWj7rHezozoytyVx2Oi3w2obKEYhQJAm6ip6gOtfl1KWTK3GBDGlw+m8g/EG+ng=,v
d3ZQyVkBJTyOqVF4ITMbiQRRpnZyNEbRjd5ttqqScScpUzqJWHbL+/F7vvr/s67bhsVwJQx3puZH4Bvp4u8QviOGmpRNqNTHdnHEWs3fx7fXS7Ez2/aQdUTAdcvnFYl7drNDMjl4GZlP75q5atEnbe2gYk6/HYakLlsmd2vS23k=NKwpFUlywDyvDEhJRfAOCTp/mKpY1V/JT89pjlUYKUX8Ad0apgjR6WaINOpWaFrfT6ngwFDn2R6T4IzYcBkvoOm4qK5OZE1p4rY1eM6ny42LHWZKa+ePWSWdn2eyI/e2856b8NpwevwExu++ICd+JBUQdIiomVfOXT6Ni7/SOKc=,v
XLt9HhC9oq3TswRjzN3XzI4LENEszscpDP3WttV7QO5+T+ylymZ9zsQsyXoYHdS36NfghUvfI5MISgUmsKbdmFXixbK5m3HEmYWBHOKRd86eZVbbZNdhIw7hIONhRFUIvvGXfm0dULQsTorjuQitAyLIX6iezbvWhnJ9akq1qTw=PEVxIW1eCgYeiSWUarcWVWMLRG1x/gqNFVlvB2S720YD5ZUn0ZyW+PpWgFmHJDPwnUF9V47dBgBQpgeqyASHH5g+AHuCN5yho/HMneFF85lJLvxhJUWxceXzWuO9/i70hd5ffsGl1ataDCHRyUx25xAcQbKl1ueu2LFSxS/n/bY=,v
WSHDIDerivacionPruebas#01,v
priv_key_hdi.kez,v
C:\inetpub\wwwroot\AUTOMARSH_SitiosEsp\Framework35\MMC.AutoMarsh.Derivacion\MMC.AutoMarsh.Derivacion.Service\bin\PrivateKeys\pub_key_hdi.pke,v
'.,v
No se pudo encontrar el archivo ',v
   en MMC.AutoMarsh.Derivacion.Business.DerivacionHDI.DerivarHDI(SolicitudDerivacionHDI solicitud) en C:\inetpub\wwwroot\AUTOMARSH_SitiosEsp\Framework35\MMC.AutoMarsh.Derivacion\MMC.AutoMarsh.Derivacion.Business\DerivacionHDI.cs:línea 201   en MMC.AutoMarsh.Derivacion.Service.WCFDerivacion.DerivarHDI(SolicitudDerivacionHDI solicitud) en C:\inetpub\wwwroot\AUTOMARSH_SitiosEsp\Framework35\MMC.AutoMarsh.Derivacion\MMC.AutoMarsh.Derivacion.Service\WCFDerivacion.svc.cs:línea 56,V
No se pudo encontrar el archivo 'C:\inetpub\wwwroot\AUTOMARSH_SitiosEsp\Framework35\MMC.AutoMarsh.Derivacion\MMC.AutoMarsh.Derivacion.Service\bin\PrivateKeys\pub_key_hdi.pke'.,v
C:\inetpub\wwwroot\AUTOMARSH_SitiosEsp\Framework35\MMC.AutoMarsh.Derivacion\MMC.AutoMarsh.Derivacion.Service\bin,v
\,v
Bundle 'tomtom/quickfixsigns_vim',V
using System.Web.Hosting;,v
No se puede encontrar una parte de la ruta de acceso 'c:\windows\system32\inetsrv\PrivateKeys\pub_key_hdi.pke'.,v
c:\windows\system32\inetsrv,v
{System.IO.DirectoryNotFoundException: No se puede encontrar una parte de la ruta de acceso 'C:\Windows\Microsoft.NET\Framework64\v2.0.50727\Temporary ASP.NET Files\mmc.automarsh.derivacion.service\4ae4b7bc\1d750579\assembly\dl3\db475444\9f72e76c_6240ce01\PrivateKeys\pub_key_hdi.pke'.   en System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)   en System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy)   en System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, String msgPath, Boolean bFromProxy)   en System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)   en System.IO.StreamReader..ctor(String path, Encoding encoding, Boolean detectEncodingFromByteOrderMarks, Int32 bufferSize)   en System.IO.StreamReader..ctor(String path, Encoding encoding)   en System.IO.File.ReadAllText(String path, Encoding encoding)   en MMC.AutoMarsh.Derivacion.Business.DerivacionBase.ValidarToken(String token, Aseguradoras aseguradora) en C:\inetpub\wwwroot\AUTOMARSH_SitiosEsp\Framework35\MMC.AutoMarsh.Derivacion\MMC.AutoMarsh.Derivacion.Business\DerivacionBase.cs:línea 136   en MMC.AutoMarsh.Derivacion.Business.DerivacionHDI.DerivarHDI(SolicitudDerivacionHDI solicitud) en C:\inetpub\wwwroot\AUTOMARSH_SitiosEsp\Framework35\MMC.AutoMarsh.Derivacion\MMC.AutoMarsh.Derivacion.Business\DerivacionHDI.cs:línea 59},V
System.Reflection.Assembly.GetEntryAssembly().Location,v
file:\C:\inetpub\wwwroot\AUTOMARSH_SitiosEsp\Framework35\MMC.AutoMarsh.Derivacion\MMC.AutoMarsh.Derivacion.Service\bin\PrivateKeys\pub_key_hdi.pke,v
PrivateKeys,v
file:\C:\inetpub\wwwroot\AUTOMARSH_SitiosEsp\Framework35\MMC.AutoMarsh.Derivacion\MMC.AutoMarsh.Derivacion.Service\bin,v
EsValido,v
240819,v
XmlDocument.LoadXm,v
https://github.com/tomtom/checksyntax_vim.git,v
tomtom/checksyntax_vim,v
https://github.com/tomtom/tlib_vim.git,v
Bundle 'tomtom/tlib_vim',V
-----------------------------------------------,V
tomtom/vimtlib,v
AutoMarsh.Derivacion,v
AutoMarsh.Core ,v
let g:NERDTreeBookmarksFile = expand($HOME . '/vimfiles/_NERDTreeBookmarks'),v
_NERDTreeBookmarks,v
,V
<asp:Content ID="Content2" ContentPlaceHolderID="ContentPlaceHolderContenido" runat="server">,v
https://github.com/jeetsukumaran/vim-buffergator,v
<Leader>b Invokes ":BuffergatorOpen": open the buffer catalog, or go                    to it if it is already open.<Leader>B Invokes ":BuffergatorClose": close the buffer catalog.<Leader>t Invokes ":BuffergatorTabsOpen": open the tab page catalog,                    or go to it if it is already open.<Leader>T Invokes ":BuffergatorTabsClose": close the tab page                    catalog.,V
C:\inetpub\wwwroot\AUTOMARSH_SitiosEsp\Framework35\MMC.AutoMarsh.Derivacion,v
Bundle 'majutsushi/tagbar.git',V
                                   ',V
nnoremap <Leader>gc :Gcommit<CR>,V
",v
""I make sure the working directory is set correctly.nmap <leader>l :set list!<CR>,V
xml_priv_key =,v
let g:reload_on_write = 0,V
https://github.com/xolox/vim-reload,v
"---------------------------------------------------------,V
let g:reload_on_write = 0,v
bronson/vim-visual-star-search,v
Bundle 'bronson/vim-visual-star-search',V
xolox/vim-reload,v
12429,v
https://blu173.mail.live.com/default.aspx?id=64855&rru=inbox#n=6244216&rru=inbox&view=1,v
1:_vimrc,v
5:VIDBCD4.tmp,v
 ,v
 public bool ValidarToken(string token){            bool blReturn = false;            return blReturn;        },V
https://github.com/code2k/dot_vim/blob/master/keymap.vim   ,v
dsDatos,v
3:_vimrc,v
" map <C-F4> :TlistToggle<CR>,V
1:keymap.vim,v
WITH(NOLOCK),v
indent_guides_guide_size,v
   ,1
tu de mamacita,v
item.Field<int>("Inciso"),,v
private string _conexion = string.Empty;,v
private DataSet _dsDatos = null;,v
_fechaError,v
string,v
FechaError,v
        [DataMember]        public string FechaError {            get { return _fechaError; }            set { _fechaError = value; }        },V
private_param;,v
private_param,v
 get; set; ,v
_aseguradoraId,v
_poliza,v
         ; set; ,V
            get { return _poliza; }            set { _poliza = value; },V
 ; set; ,v
get,v
                    ,V
                error            ,V
fechaError,v
fechaConfirmacion,v
_,v
_fechaDerivcacion,v
aseguradoraId,v
                aseguradoraId,                    fechaDerivcacion,                  fechaConfirmacion,                 fechaError,                        error            ,V
_inciso ,v
